using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using ObjectInfo.Deepdive.SpecificationGenerator.Core.Models;

namespace ObjectInfo.Deepdive.SpecificationGenerator.Core.Emitters
{
    public class EfCoreSpecificationEmitter : BaseSpecificationEmitter
    {
        public EfCoreSpecificationEmitter(ISourceProductionContext context) : base(context) { }

        public override string EmitSpecification(SpecificationTarget target)
        {
            var builder = new StringBuilder();

            // Add file header and usings
            EmitFileHeader(builder, target);
            EmitUsings(builder);
            builder.AppendLine();

            // Begin namespace
            builder.AppendLine($"namespace {DetermineNamespace(target)}");
            builder.AppendLine("{");

            // Begin class
            var accessibility = GetAccessibilityKeyword(target.ClassSymbol);
            var baseType = GetBaseTypeName(target);
            builder.AppendLine($"    {accessibility} class {target.ClassSymbol.Name}Specification : {baseType}");
            builder.AppendLine("    {");

            // Constructor
            EmitConstructors(builder, target);

            // Properties for filtering
            EmitFilterProperties(builder, target);

            // Apply criteria method
            EmitApplyCriteria(builder, target);

            // Navigation property methods
            if (target.Configuration.GenerateNavigationSpecs)
            {
                EmitNavigationPropertyMethods(builder, target);
            }

            // Include configuration methods
            EmitIncludeConfigurations(builder, target);

            // Close class and namespace
            builder.AppendLine("    }");
            builder.AppendLine("}");

            return builder.ToString();
        }

        private void EmitFileHeader(StringBuilder builder, SpecificationTarget target)
        {
            if (target.Configuration.GenerateDocumentation)
            {
                builder.AppendLine("// <auto-generated/>");
                builder.AppendLine("// Generated by ObjectInfo.Deepdive.SpecificationGenerator");
                builder.AppendLine($"// Target Entity: {target.ClassSymbol.Name}");
                builder.AppendLine($"// Generated: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
                builder.AppendLine();
            }
        }

        private void EmitUsings(StringBuilder builder)
        {
            builder.AppendLine("using System;");
            builder.AppendLine("using System.Linq;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine("using System.Linq.Expressions;");
            builder.AppendLine("using Microsoft.EntityFrameworkCore;");
            builder.AppendLine();
        }

        private string GetBaseTypeName(SpecificationTarget target)
        {
            var entityType = target.ClassSymbol.Name;
            return target.Configuration.BaseClass?.Name ?? $"BaseSpecification<{entityType}>";
        }

        private void EmitConstructors(StringBuilder builder, SpecificationTarget target)
        {
            var className = $"{target.ClassSymbol.Name}Specification";

            // Default constructor
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Initializes a new instance of the specification with default criteria");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine($"        public {className}()");
            builder.AppendLine("        {");
            builder.AppendLine("            ApplyCriteria();");
            builder.AppendLine("        }");
            builder.AppendLine();

            // Constructor with predicate
            builder.AppendLine("        /// <summary>");
            builder.AppendLine("        /// Initializes a new instance of the specification with custom criteria");
            builder.AppendLine("        /// </summary>");
            builder.AppendLine($"        public {className}(Expression<Func<{target.ClassSymbol.Name}, bool>> criteria)");
            builder.AppendLine("            : base(criteria)");
            builder.AppendLine("        {");
            builder.AppendLine("            ApplyCriteria();");
            builder.AppendLine("        }");
            builder.AppendLine();
        }

        private void EmitFilterProperties(StringBuilder builder, SpecificationTarget target)
        {
            foreach (var property in target.Properties)
            {
                var propertyType = property.Symbol.Type;
                var propertyName = property.Symbol.Name;
                var config = property.Configuration;

                // Main property value
                if (config.GenerateNullChecks && propertyType.NullableAnnotation == NullableAnnotation.Annotated)
                {
                    EmitNullableProperty(builder, propertyName, propertyType);
                }
                else
                {
                    EmitStandardProperty(builder, propertyName, propertyType);
                }

                // String-specific filters
                if (propertyType.SpecialType == SpecialType.System_String && config.GenerateContains)
                {
                    EmitStringSearchProperties(builder, propertyName, config);
                }

                // Range filters for numeric and datetime types
                if (config.GenerateRange && IsRangeableType(propertyType))
                {
                    EmitRangeProperties(builder, propertyName, propertyType);
                }

                builder.AppendLine();
            }
        }

        private void EmitNullableProperty(StringBuilder builder, string propertyName, ITypeSymbol propertyType)
        {
            builder.AppendLine($"        private {propertyType}? _{propertyName};");
            builder.AppendLine($"        public {propertyType}? {propertyName}");
            builder.AppendLine("        {");
            builder.AppendLine($"            get => _{propertyName};");
            builder.AppendLine("            set");
            builder.AppendLine("            {");
            builder.AppendLine($"                _{propertyName} = value;");
            builder.AppendLine("                ApplyCriteria();");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
            builder.AppendLine();
            builder.AppendLine($"        public bool? {propertyName}IsNull {{ get; set; }}");
        }

        private void EmitStandardProperty(StringBuilder builder, string propertyName, ITypeSymbol propertyType)
        {
            builder.AppendLine($"        private {propertyType} _{propertyName};");
            builder.AppendLine($"        public {propertyType} {propertyName}");
            builder.AppendLine("        {");
            builder.AppendLine($"            get => _{propertyName};");
            builder.AppendLine("            set");
            builder.AppendLine("            {");
            builder.AppendLine($"                _{propertyName} = value;");
            builder.AppendLine("                ApplyCriteria();");
            builder.AppendLine("            }");
            builder.AppendLine("        }");
        }

        private void EmitStringSearchProperties(StringBuilder builder, string propertyName, PropertyConfiguration config)
        {
            if (config.GenerateContains)
            {
                builder.AppendLine($"        public string? {propertyName}Contains {{ get; set; }}");
            }
            if (config.GenerateStartsWith)
            {
                builder.AppendLine($"        public string? {propertyName}StartsWith {{ get; set; }}");
            }
            if (config.GenerateEndsWith)
            {
                builder.AppendLine($"        public string? {propertyName}EndsWith {{ get; set; }}");
            }
        }

        private void EmitRangeProperties(StringBuilder builder, string propertyName, ITypeSymbol propertyType)
        {
            builder.AppendLine($"        public {propertyType}? {propertyName}From {{ get; set; }}");
            builder.AppendLine($"        public {propertyType}? {propertyName}To {{ get; set; }}");
        }

        private void EmitApplyCriteria(StringBuilder builder, SpecificationTarget target)
        {
            builder.AppendLine("        private void ApplyCriteria()");
            builder.AppendLine("        {");
            builder.AppendLine("            Criteria = entity => true;");
            builder.AppendLine();

            foreach (var property in target.Properties)
            {
                EmitPropertyCriteria(builder, property);
            }

            builder.AppendLine("        }");
            builder.AppendLine();
        }

        private void EmitPropertyCriteria(StringBuilder builder, PropertyDetails property)
        {
            var propertyName = property.Symbol.Name;
            var propertyType = property.Symbol.Type;
            var config = property.Configuration;

            // Null checks
            if (config.GenerateNullChecks)
            {
                builder.AppendLine($"            if ({propertyName}IsNull.HasValue)");
                builder.AppendLine("            {");
                builder.AppendLine($"                Criteria = Criteria.And(e => {propertyName}IsNull.Value ? ");
                builder.AppendLine($"                    e.{propertyName} == null : ");
                builder.AppendLine($"                    e.{propertyName} != null);");
                builder.AppendLine("            }");
                builder.AppendLine();
            }

            // Main property value
            builder.AppendLine($"            if (_{propertyName} != null)");
            builder.AppendLine("            {");
            builder.AppendLine($"                Criteria = Criteria.And(e => e.{propertyName} == _{propertyName});");
            builder.AppendLine("            }");
            builder.AppendLine();

            // String-specific operations
            if (propertyType.SpecialType == SpecialType.System_String && config.GenerateContains)
            {
                EmitStringCriteria(builder, propertyName, config);
            }

            // Range operations
            if (config.GenerateRange && IsRangeableType(propertyType))
            {
                EmitRangeCriteria(builder, propertyName);
            }
        }

        private void EmitStringCriteria(StringBuilder builder, string propertyName, PropertyConfiguration config)
        {
            if (config.GenerateContains)
            {
                builder.AppendLine($"            if (!string.IsNullOrEmpty({propertyName}Contains))");
                builder.AppendLine("            {");
                if (config.CaseSensitive)
                {
                    builder.AppendLine($"                Criteria = Criteria.And(e => e.{propertyName}.Contains({propertyName}Contains));");
                }
                else
                {
                    builder.AppendLine($"                Criteria = Criteria.And(e => e.{propertyName}.ToLower().Contains({propertyName}Contains.ToLower()));");
                }
                builder.AppendLine("            }");
                builder.AppendLine();
            }

            if (config.GenerateStartsWith)
            {
                builder.AppendLine($"            if (!string.IsNullOrEmpty({propertyName}StartsWith))");
                builder.AppendLine("            {");
                if (config.CaseSensitive)
                {
                    builder.AppendLine($"                Criteria = Criteria.And(e => e.{propertyName}.StartsWith({propertyName}StartsWith));");
                }
                else
                {
                    builder.AppendLine($"                Criteria = Criteria.And(e => e.{propertyName}.ToLower().StartsWith({propertyName}StartsWith.ToLower()));");
                }
                builder.AppendLine("            }");
                builder.AppendLine();
            }

            if (config.GenerateEndsWith)
            {
                builder.AppendLine($"            if (!string.IsNullOrEmpty({propertyName}EndsWith))");
                builder.AppendLine("            {");
                if (config.CaseSensitive)
                {
                    builder.AppendLine($"                Criteria = Criteria.And(e => e.{propertyName}.EndsWith({propertyName}EndsWith));");
                }
                else
                {
                    builder.AppendLine($"                Criteria = Criteria.And(e => e.{propertyName}.ToLower().EndsWith({propertyName}EndsWith.ToLower()));");
                }
                builder.AppendLine("            }");
            }
        }

        private void EmitRangeCriteria(StringBuilder builder, string propertyName)
        {
            builder.AppendLine($"            if ({propertyName}From.HasValue)");
            builder.AppendLine("            {");
            builder.AppendLine($"                Criteria = Criteria.And(e => e.{propertyName} >= {propertyName}From.Value);");
            builder.AppendLine("            }");
            builder.AppendLine();

            builder.AppendLine($"            if ({propertyName}To.HasValue)");
            builder.AppendLine("            {");
            builder.AppendLine($"                Criteria = Criteria.And(e => e.{propertyName} <= {propertyName}To.Value);");
            builder.AppendLine("            }");
        }

        private void EmitNavigationPropertyMethods(StringBuilder builder, SpecificationTarget target)
        {
            foreach (var navProp in target.NavigationProperties)
            {
                var propName = navProp.Symbol.Name;
                var typeName = navProp.TypeSymbol.Name;

                builder.AppendLine($"        public {typeName}Specification {propName}Specification {{ get; set; }}");
                builder.AppendLine();

                builder.AppendLine($"        public {target.ClassSymbol.Name}Specification With{propName}(Action<{typeName}Specification> specificationAction)");
                builder.AppendLine("        {");
                builder.AppendLine($"            var spec = new {typeName}Specification();");
                builder.AppendLine("            specificationAction(spec);");
                builder.AppendLine($"            {propName}Specification = spec;");
                builder.AppendLine("            ApplyCriteria();");
                builder.AppendLine("            return this;");
                builder.AppendLine("        }");
                builder.AppendLine();
            }
        }

        private void EmitIncludeConfigurations(StringBuilder builder, SpecificationTarget target)
        {
            if (!target.NavigationProperties.Any()) return;

            builder.AppendLine("        protected override void AddIncludes()");
            builder.AppendLine("        {");

            foreach (var navProp in target.NavigationProperties)
            {
                var propName = navProp.Symbol.Name;
                builder.AppendLine($"            AddInclude(e => e.{propName});");
            }

            builder.AppendLine("        }");
            builder.AppendLine();
        }

        private string DetermineNamespace(SpecificationTarget target)
        {
            return target.Configuration.TargetNamespace ??
                   $"{target.ClassSymbol.ContainingNamespace}.{target.AssemblyConfiguration.DefaultNamespace}";
        }

        private bool IsRangeableType(ITypeSymbol type)
        {
            return type.SpecialType switch
            {
                SpecialType.System_Int16 or
                SpecialType.System_Int32 or
                SpecialType.System_Int64 or
                SpecialType.System_Single or
                SpecialType.System_Double or
                SpecialType.System_Decimal or
                SpecialType.System_DateTime => true,
                _ => false
            };
        }
    }
}
